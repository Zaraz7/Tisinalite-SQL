Исходный код ./App.xaml.cs
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.IO;
using System.Diagnostics;

namespace Tisinalite
{
    public partial class App : Application
    {
        private void App_Startup(object sender, StartupEventArgs e)
        {
            if (Environment.OSVersion.Platform == PlatformID.Win32NT)
            {
                if (!Directory.Exists(Global.NotesDir))
                {
                    Debug.WriteLine("А где");
                    Debug.WriteLine(Global.NotesDir);
                    Directory.CreateDirectory(Global.NotesDir);
                    string f = "Welcome";
                    File.Copy(Path.Combine("Resources", f), Path.Combine(Global.NotesDir, f));
                    Debug.WriteLine(Path.Combine(Global.NotesDir, f));
                    Settings settings = Settings.GetSettings();

                    settings.OpenNote = f;
                    settings.Save();
                    
                }
            }
        }
    }
}
Исходный код ./BaseModel.Context.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class TisinaliteDBEntities : DbContext
    {
        private static TisinaliteDBEntities _contex;
        public TisinaliteDBEntities()
            : base("name=TisinaliteDBEntities")
        {
        }
        public static TisinaliteDBEntities GetContext()
        {
            if (_contex == null)
                _contex = new TisinaliteDBEntities();
            return _contex;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<Images> Images { get; set; }
        public virtual DbSet<Notes> Notes { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersOfGroups> UsersOfGroups { get; set; }
    }
}
Исходный код ./BaseModel.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

Исходный код ./BaseModel.Designer.cs
﻿// Создание кода T4 для модели "F:\Code\Как же меня высе заеб__\Tisinalite-SQL\Tisinalite\BaseModel.edmx" включено. 
// Чтобы включить формирование кода прежних версий, измените значение свойства "Стратегия создания кода" конструктора
// на "Legacy ObjectContext". Это свойство доступно в окне "Свойства", если модель
// открыта в конструкторе.

// Если не сформированы контекст и классы сущности, возможная причина в том, что вы создали пустую модель, но
// еще не выбрали версию Entity Framework для использования. Чтобы сформировать класс контекста и классы сущностей
// для своей модели, откройте модель в конструкторе, щелкните правой кнопкой область конструктора и
// выберите "Обновить модель из базы данных", "Сформировать базу данных из модели" или "Добавить элемент формирования
// кода...".Исходный код ./Global.cs
﻿using System;
using System.Text;
using System.Diagnostics;
using System.Windows.Controls;

namespace Tisinalite
{
    // Класс с глобальными переменными и функциями
    public class Global
    {
        // Строки с путями в файловой системе
        public static string TisinaliteDir = Environment.GetEnvironmentVariable("USERPROFILE") + @"\Documents\Tisinalite";
        public static string SettingsFile = "settings.xml";
        public static string NotesDir = TisinaliteDir + @"\Notes";
        // Фрейм, где происходит переключение всех окон
        public static Frame MainFrame { get; set; }
        public static string GetSettingsFile()
        {
            return TisinaliteDir + "\\" + SettingsFile;
        }
        public static string GetNoteFile(string note)
        {
            Debug.WriteLine(NotesDir + "\\" + note);
            return NotesDir + "\\" + note;
        }
    }
}
Исходный код ./Groups.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class Groups
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Groups()
        {
            this.Notes = new HashSet<Notes>();
            this.UsersOfGroups = new HashSet<UsersOfGroups>();
        }
    
        public int ID { get; set; }
        public string Title { get; set; }
        public int MasterID { get; set; }
        public string Access { get; set; }
        public string Password { get; set; }
    
        public virtual Users Users { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Notes> Notes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UsersOfGroups> UsersOfGroups { get; set; }
    }
}
Исходный код ./Images.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class Images
    {
        public int ID { get; set; }
        public byte[] BinaryFile { get; set; }
    }
}
Исходный код ./MainWindow.xaml.cs
﻿using System.Windows;


namespace Tisinalite
{
    // Это главное окно, где перелистываются почти все страницы
    public partial class MainWindow : Window
    {
        Pages.Login login;
        public MainWindow()
        {
            InitializeComponent();
            // Первой страницей будет открываться авторизация
            MainFrame.Navigate(new Pages.Login());
            Global.MainFrame = MainFrame;
        }

        private void ClosingEvent(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // При закрытии приложения
        }
    }
}
Исходный код ./Notes.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class Notes
    {
        public int ID { get; set; }
        public string Title { get; set; }
        public string Contents { get; set; }
        public Nullable<int> GroupID { get; set; }
    
        public virtual Groups Groups { get; set; }
    }
}
Исходный код ./Pages/General.xaml.cs
﻿using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Diagnostics;
using System.Data.Entity;
using MdXaml;

namespace Tisinalite.Pages
{
    /// <summary>
    /// Логика взаимодействия для General.xaml
    /// </summary>
    public partial class General : Page
    {
        private Settings _settings = Settings.GetSettings();
        //private string notePath;
        Users user;
        Notes openNote = new Notes();
        Groups selectedGroup = new Groups();
        TisinaliteDBEntities db = new TisinaliteDBEntities();
        public General(Users _user)
        {
            user = _user;
            InitializeComponent();

            UpdateTreeView();
            //Binding binding = new Binding();
            //binding.ElementName = "tbEditor";
            //binding.Path = new PropertyPath("Text");
            //Markdownview.SetBinding(MarkdownScrollViewer.MarkdownProperty, binding);

        }

        // Executes
        private void NewExecute(object sender, ExecutedRoutedEventArgs e)
        {

            if (openNote.ID != 0)
                SaveNote();
            NewNote();
            UpdateTreeView();
        }
        private void SaveExecute(object sender, ExecutedRoutedEventArgs e)
        {
            SaveNote();
            UpdateTreeView();
        }
        private void DeleteExecute(object sender, ExecutedRoutedEventArgs e)
        {
            if (MessageBox.Show($"Вы точно хотите удалить \"{openNote.Title}\"?", "Подтверждение действия", MessageBoxButton.YesNo) != MessageBoxResult.Yes)
                return;
            try
            {
                TisinaliteDBEntities.GetContext().Notes.Remove(openNote);
                TisinaliteDBEntities.GetContext().SaveChanges();
            }
            catch (Exception error)
            {
                MessageBox.Show(error.ToString());
            }
            UpdateTreeView();
        }
        private void CloseExecute(object sender, ExecutedRoutedEventArgs e)
        {
            if (MessageBox.Show("Вы точно хотите выйти? Все несохраненные изменения будут потеряны.", "Выход", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
            {
                Application.Current.Shutdown();
            }
        }
        private void PasteExecute(object sender, ExecutedRoutedEventArgs e)
        {
            tbEditor.Paste();
        }
        // Execute cause
        private void CanDeleteExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = openNote.ID != 0;
        }
        // Any functions
        public void SaveSettings()
        {
            _settings.Save();
        }
        private void UpdateTreeView()
        {
            tvNotes.Items.Clear();
            var userOfGroups = TisinaliteDBEntities.GetContext().UsersOfGroups.ToList();
            var groups = TisinaliteDBEntities.GetContext().UsersOfGroups.ToList();

            userOfGroups = userOfGroups.Where(g => g.UserID == user.ID).ToList();


            foreach (var link in userOfGroups)
            {
                using (var db = new TisinaliteDBEntities())
                {
                    var group = db.Groups.AsNoTracking().FirstOrDefault(g => g.ID == link.GroupID);
                    if (group == null)
                        continue;

                    if (group.Access == "personal") 
                        selectedGroup = group;
                    var groupNode = new TreeViewItem { Header = group.Title, Tag = group };

                    foreach (var note in TisinaliteDBEntities.GetContext().Notes
                        .Where(n => n.GroupID == group.ID).ToList())
                    {
                        var noteNode = new TreeViewItem { Header = note.Title, Foreground = Brushes.White, Tag = note };
                        groupNode.Items.Add(noteNode);
                    }
                    tvNotes.Items.Add(groupNode);
                }
            }
        }


        public void NewNote()
        {
            if (selectedGroup.ID == 0)
            {
                MessageBox.Show("Сначало выбирете группу, в кторой будете вести заметку");
                return;
            }
            Input input = new Input();
            input.ShowDialog();
            Debug.WriteLine(input.Result);
            if (input.Result)
            {
                openNote = new Notes { Title = input.Entry, GroupID = selectedGroup.ID };
                TisinaliteDBEntities.GetContext().Notes.Add(openNote);
                TisinaliteDBEntities.GetContext().SaveChanges();
                tbEditor.Clear();
                Debug.WriteLine(openNote.Title);
            }

        }
        public void SaveNote()
        {
            Debug.WriteLine(tbEditor.Text);
            if (openNote.ID == 0)
                NewNote();
            try
            {
                openNote.Contents = tbEditor.Text;
                TisinaliteDBEntities.GetContext().SaveChanges();

            }
            catch (Exception error)
            {
                MessageBox.Show(error.ToString());
            }
            Markdownview.Markdown = tbEditor.Text;
        }
        private void OpenNote(Notes note)
        {
            if (!string.IsNullOrEmpty(tbEditor.Text))
                SaveNote();
            openNote = note;
            tbEditor.Text = note.Contents;
            Markdownview.Markdown = tbEditor.Text;
        }

        // Events
        private void tvNote_Changed(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            TreeViewItem item = (TreeViewItem)tvNotes.SelectedItem;
            if (item == null)
            {
                Debug.WriteLine("Не работает");
                return;
            }
            if (item.Foreground.Equals(Brushes.White))
            {
                Debug.WriteLine("Note");
                OpenNote((Notes)item.Tag);
            }
            else
            {
                Debug.WriteLine("Group");
                Groups group = item.Tag as Groups;
                Debug.WriteLine(group.Title + tvNotes.SelectedValuePath);
                selectedGroup = group;
            }

        }

        private void ClosingEvent(object sender, System.ComponentModel.CancelEventArgs e)
        {

        }

        // Clicks
        private void Image_Click(object sender, RoutedEventArgs e)
        {

        }

        private void NewGroup_Click(object sender, RoutedEventArgs e)
        {
            var input = new GroupEdit(user.ID);
            input.ShowDialog();
            UpdateTreeView();
        }

        private void DeleteGroup_Click(object sender, RoutedEventArgs e)
        {
            if (selectedGroup.ID == 0)
            {
                MessageBox.Show("Сначало выберети группу.");
                return;
            }
            if (selectedGroup.Access == "personal")
            {
                MessageBox.Show("Вы не можете удалить свою личную группу, она у вас одна!");
                return;
            }
            if (MessageBox.Show("Вы точно хотите удаить группу и её заметки? Это действие невозможно отменить!",
                "Подтверждение действия", MessageBoxButton.YesNoCancel) == MessageBoxResult.Yes)
            {
                try
                {
                    var links = TisinaliteDBEntities.GetContext().UsersOfGroups.ToList();
                    links = links.Where(l => l.GroupID == selectedGroup.ID).ToList();
                    TisinaliteDBEntities.GetContext().UsersOfGroups.RemoveRange(links);
                    TisinaliteDBEntities.GetContext().SaveChanges();
                    if (selectedGroup.Access != "public")
                    {
                        var notes = TisinaliteDBEntities.GetContext().Notes.ToList();
                        notes = notes.Where(n => n.GroupID == selectedGroup.ID).ToList();
                        TisinaliteDBEntities.GetContext().Notes.RemoveRange(notes);
                        TisinaliteDBEntities.GetContext().SaveChanges();

                        TisinaliteDBEntities.GetContext().Groups.Remove(selectedGroup);
                    }

                    TisinaliteDBEntities.GetContext().SaveChanges();
                }
                catch
                {
                    // Хуй знает, но он всегда жалуется
                    // По этому я его заткнул
                    //MessageBox.Show(error.ToString());
                }
                
            }
            UpdateTreeView();
        }

        private void Connect_Click(object sender, RoutedEventArgs e)
        {
            var input = new Input ( "Введите ID группы", "Подключение" );
            input.ShowDialog();
            if (!input.Result)
                return;
            var id = int.Parse(input.Entry);
            var group = db.Groups.FirstOrDefault(g => g.ID == id);
            if (group == null || group.Access != "public")
            {
                MessageBox.Show("Нет публичной папки с таким именем");
                return;
            }
            var link = new UsersOfGroups { UserID = user.ID, GroupID = id };
            TisinaliteDBEntities.GetContext().UsersOfGroups.Add(link);
            TisinaliteDBEntities.GetContext().SaveChanges();
            UpdateTreeView();
        }
        private void Disconnect_Click(object sender, RoutedEventArgs e)
        {
            if (selectedGroup.ID == 0)
            {
                MessageBox.Show("Сначало выберети папку.");
                return;
            }
            if (selectedGroup.Access == "private" || selectedGroup.Access == "personal")
            {
                MessageBox.Show("Приватные папки не отключаются. Они удаляются");
                return;
            }
            if (selectedGroup.MasterID == user.ID)
            {
                MessageBox.Show("Вы не можете отключиться от своей созданной папки (это пока не реализовано), но вы можете её удалить.");
                return;
            }
            var link = db.UsersOfGroups.FirstOrDefault(l => l.UserID == user.ID && l.GroupID == selectedGroup.ID);
            Debug.WriteLine(link.ID);

            TisinaliteDBEntities.GetContext().UsersOfGroups.Attach(link);
            TisinaliteDBEntities.GetContext().Entry(link).State = EntityState.Deleted;
            TisinaliteDBEntities.GetContext().SaveChanges();
        }

        private void LogOut_Click(object sender, RoutedEventArgs e)
        {
            Global.MainFrame.GoBack();
        }
    }
}
Исходный код ./Pages/GroupEdit.xaml.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Diagnostics;

namespace Tisinalite.Pages
{
    public partial class GroupEdit : Window
    {
        Groups group;
        public GroupEdit(int _masterID, Groups _group = null)
        {
            // Проверка на наличие группы в БД
            if (_group == null)
            {
                group = new Groups { MasterID = _masterID };
            }
            else
            {
                cbAccess.IsEnabled = false;
                group = _group;
            }

            InitializeComponent();
            DataContext = group;
        }

        private void SaveGroup_Click(object sender, RoutedEventArgs e)
        {
            // Запрещаем вписывать пустые поля
            if (string.IsNullOrWhiteSpace(tbTitle.Text))
            {
                MessageBox.Show("Неправильное имя");
                return;
            }
            group.Title = tbTitle.Text;
            group.Access = ((ComboBoxItem)cbAccess.SelectedItem).Tag.ToString();
            Debug.WriteLine(group.Title + " " + group.Access);
            if (group.ID == 0)
            {
                // Разграничение доступности в зависимости от выбранного параметра в combobox
                switch (cbAccess.SelectedIndex)
                {
                    case 0:
                        group.Access = "private";
                        break;
                    case 1:
                        group.Access = "public";
                        break;
                }
                // Попытка сохранить значения
                try
                {
                    TisinaliteDBEntities.GetContext().Groups.Add(group);
                    TisinaliteDBEntities.GetContext().SaveChanges();

                    TisinaliteDBEntities.GetContext().UsersOfGroups.Add(new UsersOfGroups { GroupID = group.ID, UserID = group.MasterID });
                    TisinaliteDBEntities.GetContext().SaveChanges();

                    if (group.Access == "public")
                        tbID.Text = $"Код группы: {group.ID}";
                }
                catch (Exception error)
                {
                    MessageBox.Show(error.ToString());
                }
            }
            else
            {
                try
                {
                    TisinaliteDBEntities.GetContext().SaveChanges();
                }
                catch (Exception error)
                {
                    MessageBox.Show(error.ToString());
                }
            }
        }
    }
}
Исходный код ./Pages/Input.xaml.cs
﻿using System.Windows;
using System.Windows.Controls;


namespace Tisinalite.Pages
{
    /// <summary>
    /// Логика взаимодействия для Input.xaml
    /// </summary>
    public partial class Input : Window
    {
        public string Entry;
        public bool Result = false;
        public Input(string messegeText = "Введите имя заметки", string title = "Введите данные")
        {
            InitializeComponent();
            // Опциональная информация, вводимые при создание окна
            messege.Text = messegeText;
            Title = title;
        }

        private void Ok_Click(object sender, RoutedEventArgs e)
        {
            Entry = inputEntry.Text;
            if ( string.IsNullOrWhiteSpace(Entry) || Entry.Contains(@"\"))
            {
                Warning();
                return;
            }
            Result = true;
            this.Close();
        }
        // Если значения будут неправельными, то красным по белому будет выведено сообщение об ошибке
        public void Warning(string warningText = "Поле было пустым, или имело специальные символы")
        {
            warning.Text = warningText;
            warning.Visibility = Visibility.Visible;
        }
    }
}
Исходный код ./Pages/Login.xaml.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Tisinalite.Pages
{
    /// <summary>
    /// Логика взаимодействия для Login.xaml
    /// </summary>
    public partial class Login : Page
    {
        public Login()
        {
            InitializeComponent();
        }

        private void Login_Click(object sender, RoutedEventArgs e)
        {
            // Проверка на содержание пустых полей
            if (string.IsNullOrEmpty(tbLogin.Text) || string.IsNullOrEmpty(pbPassword.Password))
            {
                MessageBox.Show("Сначало заполните все поля.");
                return;
            }
            // Попытка авторизироваться
            using (var db = new TisinaliteDBEntities())
            {
                var user = db.Users.AsNoTracking().FirstOrDefault(u => u.Login == tbLogin.Text && u.Password == pbPassword.Password);
                if (user == null)
                {
                    MessageBox.Show("Неверный логин или пароль.");
                    return;
                }
                // Открытие главной страницы с авторизированными данными 
                Global.MainFrame.Navigate(new General(user));
            }
            
        }

        private void Regist_Click(object sender, RoutedEventArgs e)
        {
            Global.MainFrame.Navigate(new Regist());
        }
    }
}
Исходный код ./Pages/Regist.xaml.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Tisinalite.Pages
{
    /// <summary>
    /// Логика взаимодействия для Regist.xaml
    /// </summary>
    public partial class Regist : Page
    {
        public Regist()
        {
            InitializeComponent();
        }

        private void Regist_Click(object sender, RoutedEventArgs e)
        {
            Login_Click(sender, e);
        }

        private void Login_Click(object sender, RoutedEventArgs e)
        {
            Global.MainFrame.Navigate(new Login());
        }
    }
}
Исходный код ./Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// Общие сведения об этой сборке предоставляются следующим набором
// набор атрибутов. Измените значения этих атрибутов, чтобы изменить сведения,
// связанные со сборкой.
[assembly: AssemblyTitle("Tisinalite")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Tisinalite")]
[assembly: AssemblyCopyright("Copyright ©  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Установка значения False для параметра ComVisible делает типы в этой сборке невидимыми
// для компонентов COM. Если необходимо обратиться к типу в этой сборке через
// из модели COM, установите атрибут ComVisible для этого типа в значение true.
[assembly: ComVisible(false)]

//Чтобы начать создание локализуемых приложений, задайте
//<UICulture>CultureYouAreCodingWith</UICulture> в файле .csproj
//в <PropertyGroup>. Например, при использовании английского (США)
//в своих исходных файлах установите <UICulture> в en-US.  Затем отмените преобразование в комментарий
//атрибута NeutralResourceLanguage ниже.  Обновите "en-US" в
//строка внизу для обеспечения соответствия настройки UICulture в файле проекта.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //где расположены словари ресурсов по конкретным тематикам
                                     //(используется, если ресурс не найден на странице,
                                     // или в словарях ресурсов приложения)
    ResourceDictionaryLocation.SourceAssembly //где расположен словарь универсальных ресурсов
                                              //(используется, если ресурс не найден на странице,
                                              // в приложении или в каких-либо словарях ресурсов для конкретной темы)
)]


// Сведения о версии для сборки включают четыре следующих значения:
//
//      Основной номер версии
//      Дополнительный номер версии
//      Номер сборки
//      Номер редакции
//
// Можно задать все значения или принять номера сборки и редакции по умолчанию 
// используя "*", как показано ниже:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
Исходный код ./Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Tisinalite.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 	Добро пожаловать в Tisinalite!
        ///- Это open-source приложение для ведения заметок
        ///- Вы можете создать свою, или открыть существующую
        ///- А можете открыть любой текстовый файл.
        /// </summary>
        internal static string Welcome {
            get {
                return ResourceManager.GetString("Welcome", resourceCulture);
            }
        }
    }
}
Исходный код ./Properties/Settings.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.10.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
Исходный код ./Settings.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Serialization;

namespace Tisinalite
{
    public class Settings
    {
        public static Settings GetSettings()
        {
            Settings settings = null;
            string filename = Global.GetSettingsFile();
            if (File.Exists(filename))
            {
                using (FileStream fs = new FileStream(filename, FileMode.Open))
                {
                    XmlSerializer xser = new XmlSerializer(typeof(Settings));
                    settings = (Settings)xser.Deserialize(fs);
                    fs.Close();
                }
            }
            else
                settings = new Settings();
            return settings;
        }
        public void Save()
        {
            string filename = Global.GetSettingsFile();
            if (File.Exists(filename))
                File.Delete(filename);
            using (FileStream fs = new FileStream(filename, FileMode.Create)) 
            { 
                XmlSerializer xser = new XmlSerializer(typeof(Settings));
                xser.Serialize(fs, this);
                fs.Close();
            }
        }
        
        public string OpenNote { get; set; }
    }
}
Исходный код ./sysdiagrams.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class sysdiagrams
    {
        public string name { get; set; }
        public int principal_id { get; set; }
        public int diagram_id { get; set; }
        public Nullable<int> version { get; set; }
        public byte[] definition { get; set; }
    }
}
Исходный код ./Users.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class Users
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Users()
        {
            this.Groups = new HashSet<Groups>();
            this.UsersOfGroups = new HashSet<UsersOfGroups>();
        }
    
        public int ID { get; set; }
        public string Login { get; set; }
        public string Password { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Groups> Groups { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UsersOfGroups> UsersOfGroups { get; set; }
    }
}
Исходный код ./UsersOfGroups.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tisinalite
{
    using System;
    using System.Collections.Generic;
    
    public partial class UsersOfGroups
    {
        public Nullable<int> UserID { get; set; }
        public Nullable<int> GroupID { get; set; }
        public int ID { get; set; }
    
        public virtual Groups Groups { get; set; }
        public virtual Users Users { get; set; }
    }
}
